//go:build windows

// Code generated by 'go generate' using "github.com/Microsoft/go-winio/tools/mkwinsyscall"; DO NOT EDIT.

package computecore

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	return e
}

var (
	modcomputecore = windows.NewLazySystemDLL("computecore.dll")

	procHcsCancelOperation                      = modcomputecore.NewProc("HcsCancelOperation")
	procHcsCloseComputeSystem                   = modcomputecore.NewProc("HcsCloseComputeSystem")
	procHcsCloseOperation                       = modcomputecore.NewProc("HcsCloseOperation")
	procHcsCrashComputeSystem                   = modcomputecore.NewProc("HcsCrashComputeSystem")
	procHcsCreateComputeSystem                  = modcomputecore.NewProc("HcsCreateComputeSystem")
	procHcsCreateOperation                      = modcomputecore.NewProc("HcsCreateOperation")
	procHcsEnumerateComputeSystems              = modcomputecore.NewProc("HcsEnumerateComputeSystems")
	procHcsGetComputeSystemFromOperation        = modcomputecore.NewProc("HcsGetComputeSystemFromOperation")
	procHcsGetComputeSystemProperties           = modcomputecore.NewProc("HcsGetComputeSystemProperties")
	procHcsGetOperationContext                  = modcomputecore.NewProc("HcsGetOperationContext")
	procHcsGetOperationId                       = modcomputecore.NewProc("HcsGetOperationId")
	procHcsGetOperationResult                   = modcomputecore.NewProc("HcsGetOperationResult")
	procHcsGetOperationResultAndProcessInfo     = modcomputecore.NewProc("HcsGetOperationResultAndProcessInfo")
	procHcsGetOperationType                     = modcomputecore.NewProc("HcsGetOperationType")
	procHcsGetProcessFromOperation              = modcomputecore.NewProc("HcsGetProcessFromOperation")
	procHcsGetServiceProperties                 = modcomputecore.NewProc("HcsGetServiceProperties")
	procHcsGrantVmAccess                        = modcomputecore.NewProc("HcsGrantVmAccess")
	procHcsModifyComputeSystem                  = modcomputecore.NewProc("HcsModifyComputeSystem")
	procHcsOpenComputeSystem                    = modcomputecore.NewProc("HcsOpenComputeSystem")
	procHcsPauseComputeSystem                   = modcomputecore.NewProc("HcsPauseComputeSystem")
	procHcsResumeComputeSystem                  = modcomputecore.NewProc("HcsResumeComputeSystem")
	procHcsSaveComputeSystem                    = modcomputecore.NewProc("HcsSaveComputeSystem")
	procHcsSetComputeSystemCallback             = modcomputecore.NewProc("HcsSetComputeSystemCallback")
	procHcsSetOperationCallback                 = modcomputecore.NewProc("HcsSetOperationCallback")
	procHcsSetOperationContext                  = modcomputecore.NewProc("HcsSetOperationContext")
	procHcsShutDownComputeSystem                = modcomputecore.NewProc("HcsShutDownComputeSystem")
	procHcsStartComputeSystem                   = modcomputecore.NewProc("HcsStartComputeSystem")
	procHcsTerminateComputeSystem               = modcomputecore.NewProc("HcsTerminateComputeSystem")
	procHcsWaitForOperationResult               = modcomputecore.NewProc("HcsWaitForOperationResult")
	procHcsWaitForOperationResultAndProcessInfo = modcomputecore.NewProc("HcsWaitForOperationResultAndProcessInfo")
)

func HcsCancelOperation(op HCS_OPERATION) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsCancelOperation.Addr(), uintptr(op))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsCloseComputeSystem(cs HCS_SYSTEM) {
	syscall.SyscallN(procHcsCloseComputeSystem.Addr(), uintptr(cs))
	return
}

func HcsCloseOperation(op HCS_OPERATION) {
	syscall.SyscallN(procHcsCloseOperation.Addr(), uintptr(op))
	return
}

func HcsCrashComputeSystem(cs HCS_SYSTEM, op HCS_OPERATION, options string) (hr error) {
	var _p0 *uint16
	_p0, hr = syscall.UTF16PtrFromString(options)
	if hr != nil {
		return
	}
	return _HcsCrashComputeSystem(cs, op, _p0)
}

func _HcsCrashComputeSystem(cs HCS_SYSTEM, op HCS_OPERATION, options *uint16) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsCrashComputeSystem.Addr(), uintptr(cs), uintptr(op), uintptr(unsafe.Pointer(options)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsCreateComputeSystem(id string, config string, op HCS_OPERATION, sd *windows.SECURITY_DESCRIPTOR, cs *HCS_SYSTEM) (hr error) {
	var _p0 *uint16
	_p0, hr = syscall.UTF16PtrFromString(id)
	if hr != nil {
		return
	}
	var _p1 *uint16
	_p1, hr = syscall.UTF16PtrFromString(config)
	if hr != nil {
		return
	}
	return _HcsCreateComputeSystem(_p0, _p1, op, sd, cs)
}

func _HcsCreateComputeSystem(id *uint16, config *uint16, op HCS_OPERATION, sd *windows.SECURITY_DESCRIPTOR, cs *HCS_SYSTEM) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsCreateComputeSystem.Addr(), uintptr(unsafe.Pointer(id)), uintptr(unsafe.Pointer(config)), uintptr(op), uintptr(unsafe.Pointer(sd)), uintptr(unsafe.Pointer(cs)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsCreateOperation(context uintptr, callback uintptr) (op HCS_OPERATION) {
	r0, _, _ := syscall.SyscallN(procHcsCreateOperation.Addr(), uintptr(context), uintptr(callback))
	op = HCS_OPERATION(r0)
	return
}

func HcsEnumerateComputeSystems(query string, op HCS_OPERATION) (hr error) {
	var _p0 *uint16
	_p0, hr = syscall.UTF16PtrFromString(query)
	if hr != nil {
		return
	}
	return _HcsEnumerateComputeSystems(_p0, op)
}

func _HcsEnumerateComputeSystems(query *uint16, op HCS_OPERATION) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsEnumerateComputeSystems.Addr(), uintptr(unsafe.Pointer(query)), uintptr(op))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsGetComputeSystemFromOperation(op HCS_OPERATION) (cs HCS_SYSTEM) {
	r0, _, _ := syscall.SyscallN(procHcsGetComputeSystemFromOperation.Addr(), uintptr(op))
	cs = HCS_SYSTEM(r0)
	return
}

func HcsGetComputeSystemProperties(cs HCS_SYSTEM, op HCS_OPERATION, query string) (hr error) {
	var _p0 *uint16
	_p0, hr = syscall.UTF16PtrFromString(query)
	if hr != nil {
		return
	}
	return _HcsGetComputeSystemProperties(cs, op, _p0)
}

func _HcsGetComputeSystemProperties(cs HCS_SYSTEM, op HCS_OPERATION, query *uint16) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsGetComputeSystemProperties.Addr(), uintptr(cs), uintptr(op), uintptr(unsafe.Pointer(query)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsGetOperationContext(op HCS_OPERATION) (context uintptr) {
	r0, _, _ := syscall.SyscallN(procHcsGetOperationContext.Addr(), uintptr(op))
	context = uintptr(r0)
	return
}

func HcsGetOperationId(op HCS_OPERATION) (id uint64) {
	r0, _, _ := syscall.SyscallN(procHcsGetOperationId.Addr(), uintptr(op))
	id = uint64(r0)
	return
}

func HcsGetOperationResult(op HCS_OPERATION, result **uint16) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsGetOperationResult.Addr(), uintptr(op), uintptr(unsafe.Pointer(result)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsGetOperationResultAndProcessInfo(op HCS_OPERATION, procInfo *HCS_PROCESS_INFORMATION, result **uint16) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsGetOperationResultAndProcessInfo.Addr(), uintptr(op), uintptr(unsafe.Pointer(procInfo)), uintptr(unsafe.Pointer(result)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsGetOperationType(op HCS_OPERATION) (typ HCS_OPERATION_TYPE) {
	r0, _, _ := syscall.SyscallN(procHcsGetOperationType.Addr(), uintptr(op))
	typ = HCS_OPERATION_TYPE(r0)
	return
}

func HcsGetProcessFromOperation(op HCS_OPERATION) (proc HCS_PROCESS) {
	r0, _, _ := syscall.SyscallN(procHcsGetProcessFromOperation.Addr(), uintptr(op))
	proc = HCS_PROCESS(r0)
	return
}

func HcsGetServiceProperties(query string, result **uint16) (hr error) {
	var _p0 *uint16
	_p0, hr = syscall.UTF16PtrFromString(query)
	if hr != nil {
		return
	}
	return _HcsGetServiceProperties(_p0, result)
}

func _HcsGetServiceProperties(query *uint16, result **uint16) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsGetServiceProperties.Addr(), uintptr(unsafe.Pointer(query)), uintptr(unsafe.Pointer(result)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsGrantVmAccess(vmID string, path string) (hr error) {
	var _p0 *uint16
	_p0, hr = syscall.UTF16PtrFromString(vmID)
	if hr != nil {
		return
	}
	var _p1 *uint16
	_p1, hr = syscall.UTF16PtrFromString(path)
	if hr != nil {
		return
	}
	return _HcsGrantVmAccess(_p0, _p1)
}

func _HcsGrantVmAccess(vmID *uint16, path *uint16) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsGrantVmAccess.Addr(), uintptr(unsafe.Pointer(vmID)), uintptr(unsafe.Pointer(path)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsModifyComputeSystem(cs HCS_SYSTEM, op HCS_OPERATION, config string, identity uintptr) (hr error) {
	var _p0 *uint16
	_p0, hr = syscall.UTF16PtrFromString(config)
	if hr != nil {
		return
	}
	return _HcsModifyComputeSystem(cs, op, _p0, identity)
}

func _HcsModifyComputeSystem(cs HCS_SYSTEM, op HCS_OPERATION, config *uint16, identity uintptr) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsModifyComputeSystem.Addr(), uintptr(cs), uintptr(op), uintptr(unsafe.Pointer(config)), uintptr(identity))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsOpenComputeSystem(id string, access uint32, cs *HCS_SYSTEM) (hr error) {
	var _p0 *uint16
	_p0, hr = syscall.UTF16PtrFromString(id)
	if hr != nil {
		return
	}
	return _HcsOpenComputeSystem(_p0, access, cs)
}

func _HcsOpenComputeSystem(id *uint16, access uint32, cs *HCS_SYSTEM) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsOpenComputeSystem.Addr(), uintptr(unsafe.Pointer(id)), uintptr(access), uintptr(unsafe.Pointer(cs)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsPauseComputeSystem(cs HCS_SYSTEM, op HCS_OPERATION, options string) (hr error) {
	var _p0 *uint16
	_p0, hr = syscall.UTF16PtrFromString(options)
	if hr != nil {
		return
	}
	return _HcsPauseComputeSystem(cs, op, _p0)
}

func _HcsPauseComputeSystem(cs HCS_SYSTEM, op HCS_OPERATION, options *uint16) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsPauseComputeSystem.Addr(), uintptr(cs), uintptr(op), uintptr(unsafe.Pointer(options)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsResumeComputeSystem(cs HCS_SYSTEM, op HCS_OPERATION, options string) (hr error) {
	var _p0 *uint16
	_p0, hr = syscall.UTF16PtrFromString(options)
	if hr != nil {
		return
	}
	return _HcsResumeComputeSystem(cs, op, _p0)
}

func _HcsResumeComputeSystem(cs HCS_SYSTEM, op HCS_OPERATION, options *uint16) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsResumeComputeSystem.Addr(), uintptr(cs), uintptr(op), uintptr(unsafe.Pointer(options)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsSaveComputeSystem(cs HCS_SYSTEM, op HCS_OPERATION, options string) (hr error) {
	var _p0 *uint16
	_p0, hr = syscall.UTF16PtrFromString(options)
	if hr != nil {
		return
	}
	return _HcsSaveComputeSystem(cs, op, _p0)
}

func _HcsSaveComputeSystem(cs HCS_SYSTEM, op HCS_OPERATION, options *uint16) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsSaveComputeSystem.Addr(), uintptr(cs), uintptr(op), uintptr(unsafe.Pointer(options)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsSetComputeSystemCallback(cs HCS_SYSTEM, options HCS_EVENT_OPTIONS, context uintptr, callback uintptr) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsSetComputeSystemCallback.Addr(), uintptr(cs), uintptr(options), uintptr(context), uintptr(callback))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsSetOperationCallback(op HCS_OPERATION, context uintptr, callback uintptr) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsSetOperationCallback.Addr(), uintptr(op), uintptr(context), uintptr(callback))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsSetOperationContext(op HCS_OPERATION, context uintptr) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsSetOperationContext.Addr(), uintptr(op), uintptr(context))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsShutDownComputeSystem(cs HCS_SYSTEM, op HCS_OPERATION, options string) (hr error) {
	var _p0 *uint16
	_p0, hr = syscall.UTF16PtrFromString(options)
	if hr != nil {
		return
	}
	return _HcsShutDownComputeSystem(cs, op, _p0)
}

func _HcsShutDownComputeSystem(cs HCS_SYSTEM, op HCS_OPERATION, options *uint16) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsShutDownComputeSystem.Addr(), uintptr(cs), uintptr(op), uintptr(unsafe.Pointer(options)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsStartComputeSystem(cs HCS_SYSTEM, op HCS_OPERATION, options string) (hr error) {
	var _p0 *uint16
	_p0, hr = syscall.UTF16PtrFromString(options)
	if hr != nil {
		return
	}
	return _HcsStartComputeSystem(cs, op, _p0)
}

func _HcsStartComputeSystem(cs HCS_SYSTEM, op HCS_OPERATION, options *uint16) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsStartComputeSystem.Addr(), uintptr(cs), uintptr(op), uintptr(unsafe.Pointer(options)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsTerminateComputeSystem(cs HCS_SYSTEM, op HCS_OPERATION, options string) (hr error) {
	var _p0 *uint16
	_p0, hr = syscall.UTF16PtrFromString(options)
	if hr != nil {
		return
	}
	return _HcsTerminateComputeSystem(cs, op, _p0)
}

func _HcsTerminateComputeSystem(cs HCS_SYSTEM, op HCS_OPERATION, options *uint16) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsTerminateComputeSystem.Addr(), uintptr(cs), uintptr(op), uintptr(unsafe.Pointer(options)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsWaitForOperationResult(op HCS_OPERATION, timeoutMS uint32, result **uint16) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsWaitForOperationResult.Addr(), uintptr(op), uintptr(timeoutMS), uintptr(unsafe.Pointer(result)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func HcsWaitForOperationResultAndProcessInfo(op HCS_OPERATION, timeoutMS uint32, procInfo *HCS_PROCESS_INFORMATION, result **uint16) (hr error) {
	r0, _, _ := syscall.SyscallN(procHcsWaitForOperationResultAndProcessInfo.Addr(), uintptr(op), uintptr(timeoutMS), uintptr(unsafe.Pointer(procInfo)), uintptr(unsafe.Pointer(result)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}
